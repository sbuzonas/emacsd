(defvar fg/mode-pattern-alist
  "An association list of (mode . pattern) cons cells"
  '((clojure-mode . "\\.clj\\'")
    (coffee-mode . "\\.coffee\\'")
    (crontab-mode . "\\crontab\\.*")
    (css-mode . "\\.css\\'")
    (csv-mode . "\\.csv\\'")
    (d-mode . "\\.d\\'")
    (dart-mode . "\\.dart\\'")
    (elixir-mode . "\\.\\(elixir\\|exs?\\)\\'")
    (erlang-mode . "\\.erl\\'")
    (feature-mode . "\\.feature\\'")
    (go-mode . "\\.go\\'")
    (groovy-mode . "\\.groovy\\'")
    (haml-mode . "\\.haml\\'")
    (haskell-mode . "\\.hs\\'")
    (kivy-mode . "\\.kv\\'")
    (LaTeX-mode . "\\.\\(la\\)?tex\\'")
    (less-css-mode . "\\.less\\'")
    (lua-mode . "\\.lua\\'")
    (markdown-mode . "\\.m\\(d\\|arkdown\\)\\'")
    (taureg-mode . "\\.ml\\'")
    (puppet-mode . "\\.pp\\'")
    (php-mode . "\\.php\\'")
    (protobuf-mode . "\\.proto\\'")
    (pkgbuild-mode . "PKGBUILD\\'")
;    (ruby-mode . "Cheffile\\'")
    (rust-mode . "\\.rs\\'")
    (sass-mode . "\\.sass\\'")
    (scala-mode . "\\.scala\\'")
    (scss-mode . "\\.scss\\'")
    (slim-mode . "\\.slim\\'")
    (swift-mode . "\\.swift\\'")
    (textile-mode . "\\.textile\\'")
    (thrift-mode . "\\.thrift\\'")
    (yaml-mode . "\\(\\(Cheffile\\|Gemfile\\)\\.lock\\|\\.ya?ml\\)\\'")
    (dockerfile-mode . "Dockerfile\\'")))

(dolist (item fg/mode-pattern-alist)
  (add-to-list 'auto-mode-alist (reverse item)))
   
(provide 'fg-modes)
